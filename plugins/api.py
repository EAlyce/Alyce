"""PagerMaid 鎻掍欢 API 鍏煎灞?鎻愪緵 send_message, edit_message, delete_message, reply, forward, get_user, ban/kick 绛夊父鐢ㄦ帴鍙?鍏煎 Telethon/Pyrogram"""from typing import Any, Optionalfrom utils.logging import get_loggerlogger = get_logger("alyce.plugins.api")# 娑堟伅鍙戦€?async def send_message(client, chat_id: Any, text: str, **kwargs):    logger.info(f"send_message: chat_id={chat_id}, text={text}")    try:        return await client.send_message(chat_id, text, **kwargs)    except Exception as e:        logger.error(f"send_message error: {e}")        raise# 缂栬緫娑堟伅async def edit_message(client, chat_id: Any, message_id: int, text: str, **kwargs):    return await client.edit_message(chat_id, message_id, text, **kwargs)# 鍒犻櫎娑堟伅async def delete_message(client, chat_id: Any, message_id: int):    return await client.delete_messages(chat_id, message_id)# 鍥炲娑堟伅async def reply_message(client, message, text: str, **kwargs):    if hasattr(message, 'reply'):        return await message.reply(text, **kwargs)    # 鍏煎 Pyrogram    elif hasattr(client, 'send_message') and hasattr(message, 'chat'):        return await client.send_message(message.chat.id, text, reply_to_message_id=getattr(message, 'message_id', None), **kwargs)# 杞彂娑堟伅async def forward_message(client, chat_id: Any, from_chat_id: Any, message_id: int):    if hasattr(client, 'forward_messages'):        return await client.forward_messages(chat_id, from_chat_id, message_id)    elif hasattr(client, 'forward_message'):        return await client.forward_message(chat_id, from_chat_id, message_id)# 鑾峰彇娑堟伅璇︽儏async def get_message(client, chat_id: Any, message_id: int):    if hasattr(client, 'get_messages'):        return await client.get_messages(chat_id, ids=message_id)    elif hasattr(client, 'get_message'):        return await client.get_message(chat_id, message_id)# 鑾峰彇鐢ㄦ埛淇℃伅async def get_user(client, user_id: Any):    if hasattr(client, 'get_entity'):        return await client.get_entity(user_id)    elif hasattr(client, 'get_users'):        return await client.get_users(user_id)# 鑾峰彇鑱婂ぉ淇℃伅async def get_chat(client, chat_id: Any):    if hasattr(client, 'get_entity'):        return await client.get_entity(chat_id)    elif hasattr(client, 'get_chat'):        return await client.get_chat(chat_id)# 韪汉async def kick_user(client, chat_id: Any, user_id: Any):    if hasattr(client, 'kick_participant'):        return await client.kick_participant(chat_id, user_id)    elif hasattr(client, 'ban_chat_member'):        return await client.ban_chat_member(chat_id, user_id)# 绂佽█async def mute_user(client, chat_id: Any, user_id: Any, until_date: Optional[int]=None):    if hasattr(client, 'edit_permissions'):        from telethon.tl.types import ChatBannedRights        rights = ChatBannedRights(until_date=until_date or 0, send_messages=True)        return await client.edit_permissions(chat_id, user_id, rights)    elif hasattr(client, 'restrict_chat_member'):        return await client.restrict_chat_member(chat_id, user_id, permissions={"can_send_messages": False}, until_date=until_date)# 瑙ｇasync def unmute_user(client, chat_id: Any, user_id: Any):    if hasattr(client, 'edit_permissions'):        from telethon.tl.types import ChatBannedRights        rights = ChatBannedRights(until_date=None, send_messages=None)        return await client.edit_permissions(chat_id, user_id, rights)    elif hasattr(client, 'restrict_chat_member'):        return await client.restrict_chat_member(chat_id, user_id, permissions={"can_send_messages": True})# 缁熶竴寮傚父澶勭悊瑁呴グ鍣?import functoolsdef safe_api(func):    @functools.wraps(func)    async def wrapper(*args, **kwargs):        try:            return await func(*args, **kwargs)        except Exception as e:            print(f"[PluginAPI] Exception: {e}")            return None    return wrapper# ====== 鏂囦欢/濯掍綋鏀寔 ======@safe_apiasync def send_photo(client, chat_id, photo, caption: str = "", **kwargs):    if hasattr(client, 'send_file'):        return await client.send_file(chat_id, photo, caption=caption, **kwargs)    elif hasattr(client, 'send_photo'):        return await client.send_photo(chat_id, photo, caption=caption, **kwargs)@safe_apiasync def send_video(client, chat_id, video, caption: str = "", **kwargs):    if hasattr(client, 'send_file'):        return await client.send_file(chat_id, video, caption=caption, **kwargs)    elif hasattr(client, 'send_video'):        return await client.send_video(chat_id, video, caption=caption, **kwargs)@safe_apiasync def send_audio(client, chat_id, audio, caption: str = "", **kwargs):    if hasattr(client, 'send_file'):        return await client.send_file(chat_id, audio, caption=caption, **kwargs)    elif hasattr(client, 'send_audio'):        return await client.send_audio(chat_id, audio, caption=caption, **kwargs)@safe_apiasync def send_document(client, chat_id, document, caption: str = "", **kwargs):    if hasattr(client, 'send_file'):        return await client.send_file(chat_id, document, caption=caption, **kwargs)    elif hasattr(client, 'send_document'):        return await client.send_document(chat_id, document, caption=caption, **kwargs)@safe_apiasync def send_sticker(client, chat_id, sticker, **kwargs):    if hasattr(client, 'send_file'):        return await client.send_file(chat_id, sticker, **kwargs)    elif hasattr(client, 'send_sticker'):        return await client.send_sticker(chat_id, sticker, **kwargs)@safe_apiasync def send_animation(client, chat_id, animation, caption: str = "", **kwargs):    if hasattr(client, 'send_file'):        return await client.send_file(chat_id, animation, caption=caption, **kwargs)    elif hasattr(client, 'send_animation'):        return await client.send_animation(chat_id, animation, caption=caption, **kwargs)@safe_apiasync def download_media(client, message, file_name: str = None):    if hasattr(message, 'download_media'):        return await message.download_media(file=file_name)    elif hasattr(client, 'download_media'):        return await client.download_media(message, file_name)# ====== 缇ょ鐞?娑堟伅绠＄悊鎺ュ彛 ======@safe_apiasync def get_chat_members(client, chat_id):    if hasattr(client, 'get_participants'):        return await client.get_participants(chat_id)    elif hasattr(client, 'get_chat_members'):        return await client.get_chat_members(chat_id)@safe_apiasync def promote_user(client, chat_id, user_id, **kwargs):    if hasattr(client, 'edit_admin'): # Telethon        return await client.edit_admin(chat_id, user_id, **kwargs)    elif hasattr(client, 'promote_chat_member'):        return await client.promote_chat_member(chat_id, user_id, **kwargs)@safe_apiasync def demote_user(client, chat_id, user_id):    if hasattr(client, 'edit_admin'):        return await client.edit_admin(chat_id, user_id, is_admin=False)    elif hasattr(client, 'promote_chat_member'):        return await client.promote_chat_member(chat_id, user_id, can_manage_chat=False, can_post_messages=False, can_edit_messages=False, can_delete_messages=False)@safe_apiasync def set_chat_title(client, chat_id, title):    if hasattr(client, 'edit_title'):        return await client.edit_title(chat_id, title)    elif hasattr(client, 'set_chat_title'):        return await client.set_chat_title(chat_id, title)@safe_apiasync def set_chat_photo(client, chat_id, photo):    if hasattr(client, 'edit_photo'):        return await client.edit_photo(chat_id, photo)    elif hasattr(client, 'set_chat_photo'):        return await client.set_chat_photo(chat_id, photo)@safe_apiasync def set_chat_description(client, chat_id, description):    if hasattr(client, 'edit_about'):        return await client.edit_about(chat_id, description)    elif hasattr(client, 'set_chat_description'):        return await client.set_chat_description(chat_id, description)@safe_apiasync def batch_delete_messages(client, chat_id, message_ids):    if hasattr(client, 'delete_messages'):        return await client.delete_messages(chat_id, message_ids)    elif hasattr(client, 'delete_messages'):        return await client.delete_messages(chat_id, message_ids)@safe_apiasync def pin_message(client, chat_id, message_id):    if hasattr(client, 'pin_message'):        return await client.pin_message(chat_id, message_id)    elif hasattr(client, 'pin_chat_message'):        return await client.pin_chat_message(chat_id, message_id)@safe_apiasync def unpin_message(client, chat_id, message_id):    if hasattr(client, 'unpin_message'):        return await client.unpin_message(chat_id, message_id)    elif hasattr(client, 'unpin_chat_message'):        return await client.unpin_chat_message(chat_id, message_id)# ====== 鍏朵粬寤鸿鎺ュ彛鍙悗缁ˉ鍏?======