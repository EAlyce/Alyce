"""PagerMaid 鎻掍欢鍏煎瑁呴グ鍣?鏀寔 @on_command, @on_message 绛?"""from core.dispatcher import Dispatcherfrom core.command import CommandRegistrydispatcher = Dispatcher()commands = CommandRegistry()import inspectfrom functools import wrapsdef on_command(name, admin_only=False):    def decorator(func):        @wraps(func)        async def wrapper(*args, **kwargs):            # 鑷姩娉ㄥ叆 message, client, args            sig = inspect.signature(func)            params = sig.parameters            inject_args = []            # 绾﹀畾鍙傛暟椤哄簭: message, client, args            if 'message' in params:                inject_args.append(kwargs.get('message'))            if 'client' in params:                inject_args.append(kwargs.get('client'))            if 'args' in params:                inject_args.append(kwargs.get('args', []))            # 鏉冮檺鏍￠獙            if admin_only and hasattr(kwargs.get('message'), 'from_user'):                user = kwargs['message'].from_user                if not getattr(user, 'is_admin', False):                    return  # 闈炵鐞嗗憳涓嶆墽琛?            return await func(*inject_args)        commands.register(name, wrapper)        return wrapper    return decoratordef on_message(func):    @wraps(func)    async def wrapper(*args, **kwargs):        # 鑷姩娉ㄥ叆 message, client        sig = inspect.signature(func)        params = sig.parameters        inject_args = []        if 'message' in params:            inject_args.append(kwargs.get('message'))        if 'client' in params:            inject_args.append(kwargs.get('client'))        return await func(*inject_args)    dispatcher.register("message", wrapper)    return wrapper