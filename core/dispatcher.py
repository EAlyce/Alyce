"""浜嬩欢鍒嗗彂涓庡鐞嗘満鍒?鏀寔鎻掍欢缁熶竴娉ㄥ唽娑堟伅銆佸懡浠ゃ€佸洖璋冪瓑浜嬩欢"""from typing import Callable, Dict, List, Anyfrom utils.logging import get_loggerimport tracebackclass Dispatcher:    def __init__(self):        self.handlers: Dict[str, List[Callable]] = {}        self.logger = get_logger("alyce.dispatcher")    def register(self, event: str, handler: Callable):        """娉ㄥ唽浜嬩欢澶勭悊鍣?""        self.logger.info(f"娉ㄥ唽浜嬩欢: {event} handler: {handler.__name__}")        self.handlers.setdefault(event, []).append(handler)    async def dispatch(self, event: str, *args, **kwargs):        """鍒嗗彂浜嬩欢"""        self.logger.info(f"鍒嗗彂浜嬩欢: {event} args: {args} kwargs: {kwargs}")        for handler in self.handlers.get(event, []):            try:                await handler(*args, **kwargs)            except Exception as e:                self.logger.error(f"浜嬩欢澶勭悊寮傚父: {handler.__name__} - {e}\n{traceback.format_exc()}")