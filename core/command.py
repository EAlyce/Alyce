"""鍛戒护绯荤粺妗嗘灦鏀寔鎻掍欢娉ㄥ唽鍛戒护銆佽嚜鍔ㄥ府鍔┿€佹潈闄愭牎楠?"""from typing import Callable, Dict, Anyfrom utils.logging import get_loggerimport tracebackclass CommandRegistry:    def __init__(self):        self.commands: Dict[str, Callable] = {}        self.logger = get_logger("alyce.command")    def register(self, name: str, handler: Callable):        self.logger.info(f"娉ㄥ唽鍛戒护: {name} handler: {handler.__name__}")        self.commands[name] = handler    async def execute(self, name: str, *args, **kwargs):        self.logger.info(f"鎵ц鍛戒护: {name} args: {args} kwargs: {kwargs}")        # 鎻掍欢甯姪鍛戒护        if name == "help":            plugin_name = (args[0] if args else None)            if plugin_name and plugin_name in self.commands:                handler = self.commands[plugin_name]                doc = getattr(handler, "__doc__", "鏃犲府鍔╀俊鎭?)                client = kwargs.get("client")                message = kwargs.get("message")                if client and message:                    await client.send_message(message.chat.id, doc)                return            else:                client = kwargs.get("client")                message = kwargs.get("message")                if client and message:                    await client.send_message(message.chat.id, "鐢ㄦ硶锛?help 鎻掍欢鍛戒护鍚?)                return        if name in self.commands:            try:                await self.commands[name](*args, **kwargs)            except Exception as e:                self.logger.error(f"鍛戒护澶勭悊寮傚父: {name} - {e}\n{traceback.format_exc()}")    def get(self, name: str):        return self.commands.get(name)    def list_commands(self):        return list(self.commands.keys())